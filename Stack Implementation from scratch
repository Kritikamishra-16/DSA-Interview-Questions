#include <iostream>
#include<bits/stdc++.h>
#define MAX 1000
using namespace std;
class Stack{
    private:
    int top;
    public:
    int arr[MAX];
    Stack()
    {
        top=-1;
    }
    void push(int ele,int size)
    {
        //check overflow
        if(top==size-1)
        {
            cout<<"stack overflow";
            return;
        }
        top+=1;
        arr[top]=ele;
    }
    int peek()
    {
        if(top==-1)
        {
            cout<<"empty stack";
            return -1;
        }
        return arr[top];
    }
    void pop()
    {
        //check underflow
        if(top==-1)
        {
            cout<<"empty stack";
            return;
        }
        top--;
    }
    int solve(int arr[],int &top,int k)
    {
        if(k==1)
        return arr[top];
        int ele=arr[top];
        top--;
        int res=solve(arr,top,k-1);
        top++;
        arr[top]=ele;
        return res;
    }
    int getMid()
    {
        int size=top+1;
        int k=ceil((size+1)/2.0);
        return solve(arr,top,k);
    }
     void solve1(int arr[],int &top,int k)
    {
        if(k==1)
        {
            top--;
            return;
        }
        int ele=arr[top];
        top--;
        solve1(arr,top,k-1);
        top++;
        arr[top]=ele;
    }
    void deleteMid()
    {
        int size=top+1;
        int k=ceil((size+1)/2.0);
        cout<<k<<" ";
        solve1(arr,top,k);
    }
    bool isEmpty()
    {
        return top==-1;
    }
    int size()
    {
        return top+1;
    }
};
//STACK IMPLEMENTATION FROM SCRATCH
int main() {
    int n;
    cin>>n;
    int arr[n];
    for(int i=0;i<n;i++)
    {
        cin>>arr[i];
    }
    Stack st;
    for(int i=0;i<n;i++)
    {
        st.push(arr[i],n);
    }
    st.pop();
    cout<<st.peek()<<endl;
    cout<<st.size()<<endl;
    cout<<st.isEmpty()<<endl;
    st.deleteMid();
    cout<<st.getMid()<<endl;
	return 0;
}
